/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.flex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ENTRE_PATENTE = 2;
  public static final int ENTRE_TITULO = 4;
  public static final int ENTRE_DATA = 6;
  public static final int ENTRE_RESUMO = 8;
  public static final int ENTRE_REIV = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\0\1\61\1\61\1\61\22\0\1\7\1\0\1\15\2\0"+
    "\1\20\5\0\1\47\2\0\1\51\1\41\1\17\1\16\3\0\1\26"+
    "\4\0\1\52\1\0\1\1\1\14\1\21\2\0\1\3\1\4\1\50"+
    "\1\12\1\6\1\25\1\23\1\13\1\11\2\0\1\5\1\0\1\24"+
    "\1\0\1\40\1\0\1\22\1\35\1\2\1\27\1\0\1\10\4\0"+
    "\1\46\4\0\1\36\1\42\1\54\1\34\1\33\1\43\1\0\1\57"+
    "\1\31\2\0\1\55\1\56\1\30\1\44\1\60\1\0\1\53\1\37"+
    "\1\32\5\0\1\45\12\0\1\61\u1fa2\0\1\61\1\61\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\3\1\1\2\7\3\30\0\1\4\1\5\60\0"+
    "\1\6\45\0\1\7\16\0\1\10\117\0\1\11\1\0"+
    "\1\12\54\0\1\13\67\0\1\14\50\0\1\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u012c\0\u012c\0\u01c2\0\u0190\0\u01f4\0\u0226\0\u0258"+
    "\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8"+
    "\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578"+
    "\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708"+
    "\0\u073a\0\u012c\0\u012c\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834"+
    "\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4"+
    "\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54"+
    "\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4"+
    "\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74"+
    "\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004"+
    "\0\u1036\0\u1068\0\u109a\0\u012c\0\u10cc\0\u10fe\0\u1130\0\u1162"+
    "\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2"+
    "\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482"+
    "\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612"+
    "\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2"+
    "\0\u17d4\0\u012c\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900"+
    "\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90"+
    "\0\u012c\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee"+
    "\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e"+
    "\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e"+
    "\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e"+
    "\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e"+
    "\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be"+
    "\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e"+
    "\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de"+
    "\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c\0\u286e"+
    "\0\u28a0\0\u28d2\0\u2904\0\u2936\0\u2968\0\u299a\0\u29cc\0\u29fe"+
    "\0\u012c\0\u2a30\0\u012c\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a"+
    "\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\u2cba"+
    "\0\u2cec\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u2e4a"+
    "\0\u2e7c\0\u2eae\0\u2ee0\0\u2f12\0\u2f44\0\u2f76\0\u2fa8\0\u2fda"+
    "\0\u300c\0\u303e\0\u3070\0\u30a2\0\u30d4\0\u3106\0\u3138\0\u316a"+
    "\0\u319c\0\u31ce\0\u3200\0\u3232\0\u3264\0\u3296\0\u32c8\0\u012c"+
    "\0\u32fa\0\u332c\0\u335e\0\u3390\0\u33c2\0\u33f4\0\u3426\0\u3458"+
    "\0\u348a\0\u34bc\0\u34ee\0\u3520\0\u3552\0\u3584\0\u35b6\0\u35e8"+
    "\0\u361a\0\u364c\0\u367e\0\u36b0\0\u36e2\0\u3714\0\u3746\0\u3778"+
    "\0\u37aa\0\u37dc\0\u380e\0\u3840\0\u3872\0\u38a4\0\u38d6\0\u3908"+
    "\0\u393a\0\u396c\0\u399e\0\u39d0\0\u3a02\0\u3a34\0\u3a66\0\u3a98"+
    "\0\u3aca\0\u3afc\0\u3b2e\0\u3b60\0\u3b92\0\u3bc4\0\u3bf6\0\u3c28"+
    "\0\u3c5a\0\u3c8c\0\u3cbe\0\u3cf0\0\u3d22\0\u3d54\0\u3d86\0\u012c"+
    "\0\u3db8\0\u3dea\0\u3e1c\0\u3e4e\0\u3e80\0\u3eb2\0\u3ee4\0\u3f16"+
    "\0\u3f48\0\u3f7a\0\u3fac\0\u3fde\0\u4010\0\u4042\0\u4074\0\u40a6"+
    "\0\u40d8\0\u410a\0\u413c\0\u416e\0\u41a0\0\u41d2\0\u4204\0\u4236"+
    "\0\u4268\0\u429a\0\u42cc\0\u42fe\0\u4330\0\u4362\0\u4394\0\u43c6"+
    "\0\u43f8\0\u442a\0\u445c\0\u448e\0\u44c0\0\u44f2\0\u4524\0\u4556"+
    "\0\u012c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\36\7\1\11\20\7\1\12\1\13\1\14"+
    "\36\13\1\15\20\13\1\12\1\13\1\16\36\13\1\15"+
    "\20\13\1\12\1\13\1\17\36\13\1\15\20\13\1\12"+
    "\1\13\1\20\36\13\1\15\20\13\1\12\1\13\1\21"+
    "\36\13\1\15\20\13\1\12\64\0\1\22\40\0\1\23"+
    "\4\0\1\24\61\0\1\25\13\0\1\22\36\0\1\26"+
    "\1\0\1\23\4\0\1\24\13\0\1\22\36\0\1\27"+
    "\1\0\1\23\4\0\1\24\13\0\1\22\36\0\1\30"+
    "\1\0\1\23\4\0\1\24\13\0\1\22\36\0\1\31"+
    "\1\0\1\23\4\0\1\24\13\0\1\22\10\0\1\32"+
    "\27\0\1\23\4\0\1\24\14\0\1\33\122\0\1\34"+
    "\23\0\1\35\55\0\1\36\63\0\1\37\120\0\1\40"+
    "\22\0\1\41\115\0\1\42\43\0\1\43\43\0\1\44"+
    "\105\0\1\45\55\0\1\46\44\0\1\47\73\0\1\50"+
    "\104\0\1\51\36\0\1\52\61\0\1\53\61\0\1\54"+
    "\45\0\1\55\106\0\1\56\31\0\1\57\117\0\1\60"+
    "\22\0\1\61\110\0\1\62\40\0\1\63\60\0\1\64"+
    "\62\0\1\65\60\0\1\66\102\0\1\67\73\0\1\70"+
    "\52\0\1\71\30\0\1\72\67\0\1\73\111\0\1\74"+
    "\44\0\1\75\43\0\1\76\57\0\1\77\100\0\1\100"+
    "\110\0\1\101\21\0\1\102\102\0\1\103\51\0\1\104"+
    "\106\0\1\105\25\0\1\106\50\0\1\107\66\0\1\110"+
    "\64\0\1\111\115\0\1\112\15\0\1\113\131\0\1\114"+
    "\31\0\1\115\44\0\1\116\101\0\1\117\47\0\1\120"+
    "\102\0\1\121\32\0\1\122\64\0\1\123\53\0\1\124"+
    "\102\0\1\125\41\0\1\126\61\0\1\127\73\0\1\130"+
    "\66\0\1\131\52\0\1\132\110\0\1\133\41\0\1\134"+
    "\46\0\1\135\66\0\1\136\63\0\1\137\45\0\1\140"+
    "\1\0\1\141\114\0\1\142\25\0\1\143\101\0\1\144"+
    "\53\0\1\145\113\0\1\146\24\0\1\147\112\0\1\150"+
    "\51\0\1\151\51\0\1\152\60\0\1\153\55\0\1\154"+
    "\113\0\1\155\33\0\1\156\77\0\1\157\55\0\1\160"+
    "\47\0\1\161\41\0\1\162\76\0\1\163\61\0\1\164"+
    "\113\0\1\165\43\0\1\166\101\0\1\167\10\0\1\170"+
    "\64\0\1\171\74\0\1\172\57\0\1\173\121\0\1\174"+
    "\57\0\1\175\15\0\1\176\54\0\1\177\100\0\1\200"+
    "\57\0\1\201\63\0\1\202\76\0\1\203\61\0\1\204"+
    "\24\0\1\205\102\0\1\206\40\0\1\207\100\0\1\210"+
    "\72\0\1\211\104\0\1\212\11\0\1\213\76\0\1\214"+
    "\51\0\1\215\65\0\1\216\122\0\1\217\35\0\1\220"+
    "\50\0\1\221\41\0\1\222\101\0\1\223\61\0\1\224"+
    "\77\0\1\225\23\0\1\226\62\0\1\227\66\0\1\230"+
    "\53\0\1\231\61\0\1\232\121\0\1\233\32\0\1\234"+
    "\61\0\1\235\51\0\1\236\120\0\1\237\24\0\1\240"+
    "\64\0\1\241\105\0\1\242\50\0\1\243\43\0\1\244"+
    "\76\0\1\245\43\0\1\246\115\0\1\247\43\0\1\250"+
    "\61\0\1\251\41\0\1\252\65\0\1\253\130\0\1\254"+
    "\6\0\1\255\61\0\1\256\121\0\1\257\31\0\1\260"+
    "\123\0\1\261\10\0\1\262\120\0\1\263\70\0\1\264"+
    "\34\0\1\265\67\0\1\266\42\0\1\267\60\0\1\270"+
    "\56\0\1\271\77\0\1\272\115\0\1\273\10\0\1\274"+
    "\73\0\1\275\64\0\1\276\51\0\1\277\77\0\1\300"+
    "\32\0\1\301\57\0\1\302\62\0\1\303\74\0\1\304"+
    "\75\0\1\305\35\0\1\306\115\0\1\307\26\0\1\310"+
    "\60\0\1\311\120\0\1\312\26\0\1\313\120\0\1\314"+
    "\33\0\1\315\45\0\1\316\103\0\1\317\54\0\1\320"+
    "\44\0\1\321\74\0\1\322\65\0\1\323\35\0\1\324"+
    "\104\0\1\325\61\0\1\326\36\0\1\327\62\0\1\330"+
    "\120\0\1\331\34\0\1\332\47\0\1\333\117\0\1\334"+
    "\36\0\1\335\50\0\1\336\72\0\1\337\52\0\1\340"+
    "\74\0\1\341\47\0\1\342\73\0\1\343\45\0\1\344"+
    "\76\0\1\345\47\0\1\346\57\0\1\347\74\0\1\350"+
    "\51\0\1\351\75\0\1\352\43\0\1\353\64\0\1\354"+
    "\51\0\1\355\60\0\1\356\62\0\1\357\74\0\1\360"+
    "\57\0\1\361\61\0\1\362\55\0\1\363\74\0\1\364"+
    "\53\0\1\365\55\0\1\366\72\0\1\367\55\0\1\370"+
    "\55\0\1\371\57\0\1\372\100\0\1\373\45\0\1\374"+
    "\50\0\1\375\77\0\1\376\44\0\1\377\63\0\1\u0100"+
    "\75\0\1\u0101\54\0\1\u0102\70\0\1\u0103\54\0\1\u0104"+
    "\60\0\1\u0105\66\0\1\u0106\61\0\1\u0107\55\0\1\u0108"+
    "\45\0\1\u0109\61\0\1\u010a\106\0\1\u010b\37\0\1\u010c"+
    "\117\0\1\u010d\36\0\1\u010e\64\0\1\u010f\60\0\1\u0110"+
    "\60\0\1\u0111\62\0\1\u0112\55\0\1\u0113\54\0\1\u0114"+
    "\72\0\1\u0115\117\0\1\u0116\3\0\1\u0117\116\0\1\u0118"+
    "\27\0\1\u0119\107\0\1\u011a\50\0\1\u011b\47\0\1\u011c"+
    "\101\0\1\u011d\63\0\1\u011e\60\0\1\u011f\70\0\1\u0120"+
    "\53\0\1\u0121\37\0\1\u0122\104\0\1\u0123\103\0\1\u0124"+
    "\40\0\1\u0125\103\0\1\u0126\40\0\1\u0127\63\0\1\u0128"+
    "\32\0\1\u0129\103\0\1\u012a\65\0\1\u012b\102\0\1\u012c"+
    "\35\0\1\u012d\62\0\1\u012e\64\0\1\u012f\57\0\1\u0130"+
    "\57\0\1\u0131\36\0\1\u0132\105\0\1\u0133\57\0\1\u0134"+
    "\67\0\1\u0135\61\0\1\u0136\31\0\1\u0137\124\0\1\u0138"+
    "\47\0\1\u0139\22\0\1\u013a\116\0\1\u013b\27\0\1\u013c"+
    "\107\0\1\u013d\51\0\1\u013e\72\0\1\u013f\47\0\1\u0140"+
    "\70\0\1\u0141\32\0\1\u0142\112\0\1\u0143\33\0\1\u0144"+
    "\64\0\1\u0145\74\0\1\u0146\40\0\1\u0147\101\0\1\u0148"+
    "\101\0\1\u0149\24\0\1\u014a\76\0\1\u014b\41\0\1\u014c"+
    "\121\0\1\u014d\22\0\1\u014e\71\0\1\u014f\70\0\1\u0150"+
    "\41\0\1\u0151\62\0\1\u0152\71\0\1\u0153\56\0\1\u0154"+
    "\55\0\1\u0155\63\0\1\u0156\65\0\1\u0157\73\0\1\u0158"+
    "\62\0\1\u0159\51\0\1\u015a\62\0\1\u015b\66\0\1\u015c"+
    "\50\0\1\u015d\73\0\1\u015e\51\0\1\u015f\50\0\1\u0160"+
    "\74\0\1\u0161\53\0\1\u0162\62\0\1\u0163\62\0\1\u0164"+
    "\62\0\1\u0165\51\0\1\u0166\72\0\1\u0167\62\0\1\u0168"+
    "\62\0\1\u0169\72\0\1\u016a\52\0\1\u016b\62\0\1\u016c"+
    "\56\0\1\u016d\65\0\1\u016e\41\0\1\u016f\64\0\1\u0170"+
    "\76\0\1\u0171\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\2\1\2\11\6\1\30\0\2\11\60\0"+
    "\1\11\45\0\1\11\16\0\1\11\117\0\1\11\1\0"+
    "\1\11\54\0\1\11\67\0\1\11\50\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private String numero = "";
  private String titulo = "";
  private String data = "";
  private String resumo = "";
  private String reivindicacoes = "";
  private StringBuilder buffer = new StringBuilder();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                System.out.println("Número da Patente: " + numero);
  System.out.println("Título: " + titulo);
  System.out.println("Data de Publicação: " + data);
  System.out.println("Resumo:\n" + resumo);
  System.out.println("Reivindicações:\n" + reivindicacoes);
  return;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 14: break;
          case 2: 
            { System.out.print(yytext());
            } 
            // fall through
          case 15: break;
          case 3: 
            { buffer.append(yytext());
            } 
            // fall through
          case 16: break;
          case 4: 
            { yybegin(YYINITIAL); data = buffer.toString().trim();
            } 
            // fall through
          case 17: break;
          case 5: 
            { yybegin(YYINITIAL); resumo = buffer.toString().trim();
            } 
            // fall through
          case 18: break;
          case 6: 
            { yybegin(YYINITIAL); titulo = buffer.toString().trim();
            } 
            // fall through
          case 19: break;
          case 7: 
            { yybegin(ENTRE_TITULO); buffer.setLength(0);
            } 
            // fall through
          case 20: break;
          case 8: 
            { yybegin(ENTRE_DATA); buffer.setLength(0);
            } 
            // fall through
          case 21: break;
          case 9: 
            { yybegin(ENTRE_RESUMO); buffer.setLength(0);
            } 
            // fall through
          case 22: break;
          case 10: 
            { yybegin(YYINITIAL); reivindicacoes = buffer.toString().trim();
            } 
            // fall through
          case 23: break;
          case 11: 
            { yybegin(YYINITIAL); numero = buffer.toString().trim();
            } 
            // fall through
          case 24: break;
          case 12: 
            { yybegin(ENTRE_REIV); buffer.setLength(0);
            } 
            // fall through
          case 25: break;
          case 13: 
            { yybegin(ENTRE_PATENTE); buffer.setLength(0);
            } 
            // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
