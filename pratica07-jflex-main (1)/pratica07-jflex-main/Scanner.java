/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.flex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ENTRE_PATENTE = 2;
  public static final int ENTRE_TITULO = 4;
  public static final int ENTRE_DATA = 6;
  public static final int ENTRE_RESUMO = 8;
  public static final int ENTRE_REIV = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\0\1\60\1\60\1\60\22\0\1\7\1\0\1\15\2\0"+
    "\1\20\5\0\1\46\2\0\1\50\1\41\1\17\1\16\3\0\1\26"+
    "\4\0\1\51\1\0\1\1\1\14\1\21\2\0\1\3\1\4\1\47"+
    "\1\12\1\6\1\25\1\23\1\13\1\11\2\0\1\5\1\0\1\24"+
    "\1\0\1\40\1\0\1\22\1\35\1\2\1\27\1\0\1\10\11\0"+
    "\1\36\1\42\1\53\1\34\1\33\1\43\1\0\1\56\1\31\2\0"+
    "\1\54\1\55\1\30\1\44\1\57\1\0\1\52\1\37\1\32\5\0"+
    "\1\45\12\0\1\60\u1fa2\0\1\60\1\60\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\3\1\1\2\7\3\30\0\1\4\1\5\60\0"+
    "\1\6\36\0\1\7\16\0\1\10\124\0\1\11\1\0"+
    "\1\12\54\0\1\13\67\0\1\14\50\0\1\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u0126\0\u0126\0\u01b9\0\u0188\0\u01ea\0\u021b\0\u024c"+
    "\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4"+
    "\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c"+
    "\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4"+
    "\0\u0715\0\u0126\0\u0126\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a"+
    "\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992"+
    "\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2"+
    "\0\u0fe3\0\u1014\0\u1045\0\u0126\0\u1076\0\u10a7\0\u10d8\0\u1109"+
    "\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291"+
    "\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419"+
    "\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1"+
    "\0\u15d2\0\u1603\0\u0126\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8"+
    "\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880"+
    "\0\u18b1\0\u0126\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7"+
    "\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f"+
    "\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7"+
    "\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f"+
    "\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7"+
    "\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f"+
    "\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u2307"+
    "\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f"+
    "\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617"+
    "\0\u2648\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e\0\u279f"+
    "\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894\0\u28c5\0\u0126\0\u28f6"+
    "\0\u0126\0\u2927\0\u2958\0\u2989\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d"+
    "\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5"+
    "\0\u2c06\0\u2c37\0\u2c68\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d"+
    "\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5"+
    "\0\u2f16\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\u300b\0\u303c\0\u306d"+
    "\0\u309e\0\u30cf\0\u3100\0\u3131\0\u3162\0\u0126\0\u3193\0\u31c4"+
    "\0\u31f5\0\u3226\0\u3257\0\u3288\0\u32b9\0\u32ea\0\u331b\0\u334c"+
    "\0\u337d\0\u33ae\0\u33df\0\u3410\0\u3441\0\u3472\0\u34a3\0\u34d4"+
    "\0\u3505\0\u3536\0\u3567\0\u3598\0\u35c9\0\u35fa\0\u362b\0\u365c"+
    "\0\u368d\0\u36be\0\u36ef\0\u3720\0\u3751\0\u3782\0\u37b3\0\u37e4"+
    "\0\u3815\0\u3846\0\u3877\0\u38a8\0\u38d9\0\u390a\0\u393b\0\u396c"+
    "\0\u399d\0\u39ce\0\u39ff\0\u3a30\0\u3a61\0\u3a92\0\u3ac3\0\u3af4"+
    "\0\u3b25\0\u3b56\0\u3b87\0\u3bb8\0\u3be9\0\u0126\0\u3c1a\0\u3c4b"+
    "\0\u3c7c\0\u3cad\0\u3cde\0\u3d0f\0\u3d40\0\u3d71\0\u3da2\0\u3dd3"+
    "\0\u3e04\0\u3e35\0\u3e66\0\u3e97\0\u3ec8\0\u3ef9\0\u3f2a\0\u3f5b"+
    "\0\u3f8c\0\u3fbd\0\u3fee\0\u401f\0\u4050\0\u4081\0\u40b2\0\u40e3"+
    "\0\u4114\0\u4145\0\u4176\0\u41a7\0\u41d8\0\u4209\0\u423a\0\u426b"+
    "\0\u429c\0\u42cd\0\u42fe\0\u432f\0\u4360\0\u4391\0\u0126";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\36\7\1\11\17\7\1\12\1\13\1\14"+
    "\36\13\1\15\17\13\1\12\1\13\1\16\36\13\1\15"+
    "\17\13\1\12\1\13\1\17\36\13\1\15\17\13\1\12"+
    "\1\13\1\20\36\13\1\15\17\13\1\12\1\13\1\21"+
    "\36\13\1\15\17\13\1\12\63\0\1\22\40\0\1\23"+
    "\3\0\1\24\60\0\1\25\13\0\1\22\36\0\1\26"+
    "\1\0\1\23\3\0\1\24\13\0\1\22\36\0\1\27"+
    "\1\0\1\23\3\0\1\24\13\0\1\22\36\0\1\30"+
    "\1\0\1\23\3\0\1\24\13\0\1\22\36\0\1\31"+
    "\1\0\1\23\3\0\1\24\13\0\1\22\10\0\1\32"+
    "\27\0\1\23\3\0\1\24\14\0\1\33\121\0\1\34"+
    "\22\0\1\35\54\0\1\36\62\0\1\37\117\0\1\40"+
    "\21\0\1\41\114\0\1\42\42\0\1\43\42\0\1\44"+
    "\104\0\1\45\54\0\1\46\43\0\1\47\72\0\1\50"+
    "\103\0\1\51\35\0\1\52\60\0\1\53\60\0\1\54"+
    "\44\0\1\55\105\0\1\56\30\0\1\57\116\0\1\60"+
    "\21\0\1\61\107\0\1\62\37\0\1\63\57\0\1\64"+
    "\61\0\1\65\57\0\1\66\101\0\1\67\72\0\1\70"+
    "\51\0\1\71\27\0\1\72\66\0\1\73\110\0\1\74"+
    "\43\0\1\75\42\0\1\76\56\0\1\77\77\0\1\100"+
    "\106\0\1\101\21\0\1\102\101\0\1\103\50\0\1\104"+
    "\107\0\1\105\22\0\1\106\47\0\1\107\65\0\1\110"+
    "\63\0\1\111\114\0\1\112\14\0\1\113\66\0\1\114"+
    "\72\0\1\115\43\0\1\116\100\0\1\117\46\0\1\120"+
    "\101\0\1\121\31\0\1\122\66\0\1\123\47\0\1\124"+
    "\101\0\1\125\40\0\1\126\60\0\1\127\72\0\1\130"+
    "\65\0\1\131\75\0\1\132\63\0\1\133\40\0\1\134"+
    "\45\0\1\135\65\0\1\136\62\0\1\137\44\0\1\140"+
    "\1\0\1\141\107\0\1\142\30\0\1\143\100\0\1\144"+
    "\52\0\1\145\112\0\1\146\23\0\1\147\111\0\1\150"+
    "\51\0\1\151\47\0\1\152\57\0\1\153\54\0\1\154"+
    "\61\0\1\155\63\0\1\156\76\0\1\157\72\0\1\160"+
    "\30\0\1\161\40\0\1\162\75\0\1\163\57\0\1\164"+
    "\112\0\1\165\43\0\1\166\35\0\1\167\52\0\1\170"+
    "\63\0\1\171\73\0\1\172\62\0\1\173\113\0\1\174"+
    "\56\0\1\175\7\0\1\176\61\0\1\177\77\0\1\200"+
    "\56\0\1\201\77\0\1\202\60\0\1\203\26\0\1\204"+
    "\76\0\1\205\37\0\1\206\77\0\1\207\71\0\1\210"+
    "\102\0\1\211\26\0\1\212\60\0\1\213\50\0\1\214"+
    "\64\0\1\215\120\0\1\216\35\0\1\217\27\0\1\220"+
    "\100\0\1\221\60\0\1\222\76\0\1\223\22\0\1\224"+
    "\61\0\1\225\65\0\1\226\52\0\1\227\60\0\1\230"+
    "\120\0\1\231\31\0\1\232\60\0\1\233\50\0\1\234"+
    "\117\0\1\235\23\0\1\236\63\0\1\237\104\0\1\240"+
    "\47\0\1\241\42\0\1\242\75\0\1\243\42\0\1\244"+
    "\114\0\1\245\42\0\1\246\60\0\1\247\40\0\1\250"+
    "\64\0\1\251\126\0\1\252\6\0\1\253\60\0\1\254"+
    "\120\0\1\255\30\0\1\256\121\0\1\257\10\0\1\260"+
    "\117\0\1\261\66\0\1\262\34\0\1\263\66\0\1\264"+
    "\41\0\1\265\57\0\1\266\55\0\1\267\76\0\1\270"+
    "\113\0\1\271\10\0\1\272\72\0\1\273\63\0\1\274"+
    "\50\0\1\275\76\0\1\276\31\0\1\277\56\0\1\300"+
    "\61\0\1\301\73\0\1\302\74\0\1\303\34\0\1\304"+
    "\114\0\1\305\25\0\1\306\57\0\1\307\117\0\1\310"+
    "\25\0\1\311\116\0\1\312\33\0\1\313\44\0\1\314"+
    "\102\0\1\315\53\0\1\316\43\0\1\317\73\0\1\320"+
    "\64\0\1\321\34\0\1\322\103\0\1\323\60\0\1\324"+
    "\35\0\1\325\61\0\1\326\117\0\1\327\33\0\1\330"+
    "\46\0\1\331\116\0\1\332\35\0\1\333\47\0\1\334"+
    "\71\0\1\335\51\0\1\336\73\0\1\337\46\0\1\340"+
    "\72\0\1\341\44\0\1\342\75\0\1\343\46\0\1\344"+
    "\56\0\1\345\73\0\1\346\50\0\1\347\74\0\1\350"+
    "\42\0\1\351\63\0\1\352\50\0\1\353\57\0\1\354"+
    "\61\0\1\355\73\0\1\356\56\0\1\357\60\0\1\360"+
    "\54\0\1\361\73\0\1\362\52\0\1\363\54\0\1\364"+
    "\71\0\1\365\54\0\1\366\54\0\1\367\56\0\1\370"+
    "\77\0\1\371\44\0\1\372\47\0\1\373\76\0\1\374"+
    "\43\0\1\375\62\0\1\376\74\0\1\377\53\0\1\u0100"+
    "\67\0\1\u0101\53\0\1\u0102\57\0\1\u0103\65\0\1\u0104"+
    "\60\0\1\u0105\54\0\1\u0106\44\0\1\u0107\60\0\1\u0108"+
    "\105\0\1\u0109\36\0\1\u010a\116\0\1\u010b\35\0\1\u010c"+
    "\63\0\1\u010d\57\0\1\u010e\57\0\1\u010f\61\0\1\u0110"+
    "\54\0\1\u0111\53\0\1\u0112\71\0\1\u0113\115\0\1\u0114"+
    "\3\0\1\u0115\115\0\1\u0116\26\0\1\u0117\106\0\1\u0118"+
    "\47\0\1\u0119\46\0\1\u011a\100\0\1\u011b\62\0\1\u011c"+
    "\57\0\1\u011d\67\0\1\u011e\52\0\1\u011f\36\0\1\u0120"+
    "\103\0\1\u0121\101\0\1\u0122\40\0\1\u0123\101\0\1\u0124"+
    "\40\0\1\u0125\62\0\1\u0126\31\0\1\u0127\102\0\1\u0128"+
    "\64\0\1\u0129\100\0\1\u012a\35\0\1\u012b\61\0\1\u012c"+
    "\63\0\1\u012d\56\0\1\u012e\56\0\1\u012f\35\0\1\u0130"+
    "\104\0\1\u0131\56\0\1\u0132\66\0\1\u0133\60\0\1\u0134"+
    "\30\0\1\u0135\122\0\1\u0136\47\0\1\u0137\21\0\1\u0138"+
    "\115\0\1\u0139\26\0\1\u013a\106\0\1\u013b\50\0\1\u013c"+
    "\71\0\1\u013d\46\0\1\u013e\67\0\1\u013f\31\0\1\u0140"+
    "\111\0\1\u0141\32\0\1\u0142\63\0\1\u0143\73\0\1\u0144"+
    "\37\0\1\u0145\100\0\1\u0146\100\0\1\u0147\23\0\1\u0148"+
    "\75\0\1\u0149\40\0\1\u014a\120\0\1\u014b\21\0\1\u014c"+
    "\70\0\1\u014d\67\0\1\u014e\40\0\1\u014f\61\0\1\u0150"+
    "\70\0\1\u0151\55\0\1\u0152\54\0\1\u0153\62\0\1\u0154"+
    "\64\0\1\u0155\72\0\1\u0156\61\0\1\u0157\50\0\1\u0158"+
    "\61\0\1\u0159\65\0\1\u015a\47\0\1\u015b\72\0\1\u015c"+
    "\50\0\1\u015d\47\0\1\u015e\73\0\1\u015f\52\0\1\u0160"+
    "\61\0\1\u0161\61\0\1\u0162\61\0\1\u0163\50\0\1\u0164"+
    "\71\0\1\u0165\61\0\1\u0166\61\0\1\u0167\71\0\1\u0168"+
    "\51\0\1\u0169\61\0\1\u016a\55\0\1\u016b\64\0\1\u016c"+
    "\40\0\1\u016d\63\0\1\u016e\75\0\1\u016f\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17346];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\2\1\2\11\6\1\30\0\2\11\60\0"+
    "\1\11\36\0\1\11\16\0\1\11\124\0\1\11\1\0"+
    "\1\11\54\0\1\11\67\0\1\11\50\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private String numero = "";
  private String titulo = "";
  private String data = "";
  private String resumo = "";
  private String reivindicacoes = "";
  private StringBuilder buffer = new StringBuilder();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                System.out.println("Número da Patente: " + numero);
  System.out.println("Título: " + titulo);
  System.out.println("Data de Publicação: " + data);
  System.out.println("Resumo:\n" + resumo);
  System.out.println("Reivindicações:\n" + reivindicacoes);
  return;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 14: break;
          case 2: 
            { System.out.print(yytext());
            } 
            // fall through
          case 15: break;
          case 3: 
            { buffer.append(yytext());
            } 
            // fall through
          case 16: break;
          case 4: 
            { yybegin(YYINITIAL); data = buffer.toString().trim();
            } 
            // fall through
          case 17: break;
          case 5: 
            { yybegin(YYINITIAL); resumo = buffer.toString().trim();
            } 
            // fall through
          case 18: break;
          case 6: 
            { yybegin(YYINITIAL); titulo = buffer.toString().trim();
            } 
            // fall through
          case 19: break;
          case 7: 
            { yybegin(ENTRE_TITULO); buffer.setLength(0);
            } 
            // fall through
          case 20: break;
          case 8: 
            { yybegin(ENTRE_DATA); buffer.setLength(0);
            } 
            // fall through
          case 21: break;
          case 9: 
            { yybegin(ENTRE_RESUMO); buffer.setLength(0);
            } 
            // fall through
          case 22: break;
          case 10: 
            { yybegin(YYINITIAL); reivindicacoes = buffer.toString().trim();
            } 
            // fall through
          case 23: break;
          case 11: 
            { yybegin(YYINITIAL); numero = buffer.toString().trim();
            } 
            // fall through
          case 24: break;
          case 12: 
            { yybegin(ENTRE_REIV); buffer.setLength(0);
            } 
            // fall through
          case 25: break;
          case 13: 
            { yybegin(ENTRE_PATENTE); buffer.setLength(0);
            } 
            // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
